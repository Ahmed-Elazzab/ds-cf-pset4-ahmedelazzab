name: P&G Continuous Winning (Continuous Integration) DEV

on:
  pull_request_target:  # will always use the workflow definition from master/main, not your PR!
    types: [opened, synchronize, reopened, labeled, unlabeled]
    branches:
      - main
  push:
    branches:
      - main
  release:
    types: [prereleased]


jobs:
  jfrog_authentication:
      runs-on: ubuntu-latest
      outputs:
        jfrog_creds: ${{ steps.jfrog-credentials.outputs.exist }}
      steps:
        # Do not remove: useful for debug purposes
        - name: Dump event JSON and environment
          run: cat "$GITHUB_EVENT_PATH"; env

        # JFrog authentication steps. Provide your credentials in GitHub secrets if needed.
        # These steps don't verify if provided credentials are correct.
        - name: "Check JFrog credentials"
          id: jfrog-credentials
          env:
            JFROG_USERNAME: ${{ secrets.PG_USERNAME }}
            JFROG_TOKEN: ${{ secrets.JF_API_KEY }}
          run: |
            if [ -z "$JFROG_USERNAME" ] || [ -z "$JFROG_TOKEN" ]; then
              echo "::warning::JFrog credentials missing. If your project doesn't require JFrog access - you can ignore this."
              echo "exist=false" >> $GITHUB_OUTPUT
            else
              echo "exist=true" >> $GITHUB_OUTPUT
            fi

        # Check for pre-existing JFrog credentials comment in PR
        - name: Find JFrog credentials PR comment
          if: startsWith(github.event_name, 'pull_request')
          uses: peter-evans/find-comment@v2
          id: fc
          with:
            issue-number: ${{ github.event.pull_request.number }}
            comment-author: 'github-actions[bot]'
            body-includes: JFrog credentials

        # When there is no pre-existing JFrog credentials comment in PR
        - name: Create PR comment if JFrog credentials exist
          if: startsWith(github.event_name, 'pull_request') && steps.fc.outputs.comment-id == '' && steps.jfrog-credentials.outputs.exist == 'true'
          uses: peter-evans/create-or-update-comment@v2
          with:
            issue-number: ${{ github.event.pull_request.number }}
            body: |
              ### ✅ JFrog credentials
              Credentials found. If your project doesn't require JFrog access - you can ignore this.
            reactions: hooray

        - name: Create PR comment if JFrog credentials don't exist
          if: startsWith(github.event_name, 'pull_request') && steps.fc.outputs.comment-id == '' && steps.jfrog-credentials.outputs.exist == 'false'
          uses: peter-evans/create-or-update-comment@v2
          with:
            issue-number: ${{ github.event.pull_request.number }}
            body: |
              ### ⚠️ JFrog credentials
              Credentials missing. If your project doesn't require JFrog access - you can ignore this.

        # When there is a pre-existing JFrog credentials comment in PR
        - name: Update PR comment if JFrog credentials exist
          if: startsWith(github.event_name, 'pull_request') && steps.fc.outputs.comment-id != '' && steps.jfrog-credentials.outputs.exist == 'true'
          uses: peter-evans/create-or-update-comment@v2
          with:
            comment-id: ${{ steps.fc.outputs.comment-id }}
            body: |
              ### ✅ JFrog credentials
              Credentials found. If your project doesn't require JFrog access - you can ignore this.
            reactions: hooray
            edit-mode: replace

        - name: Update PR comment if JFrog credentials don't exist
          if: startsWith(github.event_name, 'pull_request') && steps.fc.outputs.comment-id != '' && steps.jfrog-credentials.outputs.exist == 'false'
          uses: peter-evans/create-or-update-comment@v2
          with:
            comment-id: ${{ steps.fc.outputs.comment-id }}
            body: |
              ### ⚠️ JFrog credentials
              Credentials missing. If your project doesn't require JFrog access - you can ignore this.
            edit-mode: replace
  checks:
    runs-on: ubuntu-latest
    needs: jfrog_authentication
    outputs:
      github-sha: ${{ steps.github-sha.outputs.GITHUB_SHA }}
    env:
      CW_RUNTIME_PYTHON_VERSION: '3.9'
    strategy:
      matrix:
        # Several Python versions can be specified: all tests will be rerun for every version
        # Useful when migrating from one Python version to the next. Note that enabling Python is
        # not required to run Continuous Winning (CW has its own Python environment in a Docker
        # container): this is for running your own tests on your own code
        python-version:  ['3.9']

    steps:

      # Do not remove: useful for debug purposes
      - name: Dump event JSON and environment
        run: cat "$GITHUB_EVENT_PATH"; env

      # Check if the proper secret has been set - it should be an org token
      - name: Check if secret PG_DNA_GITHUB_TOKEN is available
        env:
          PG_DNA_GITHUB_TOKEN: ${{ secrets.PG_DNA_GITHUB_TOKEN }}
        run: |
          if [[ ! $PG_DNA_GITHUB_TOKEN ]]; then
              MSG="Secret `PG_DNA_GITHUB_TOKEN` was not found."
              MSG="${MSG} It should be an Organization Secret with scopes \`repo:*\` and"
              MSG="${MSG} \`packages:read\`, and \`Enable SSO\` should be done too."
              MSG="${MSG} Go here - https://github.com/settings/tokens - to create a Personal Access Token."
              MSG="${MSG} See https://github.com/pg-ds-dev-class/de-cf-cw for more information."
              echo "::error::${MSG}"
              exit 1
          fi

      - name: Check if secret SONAR_TOKEN is available
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          if [[ ! ${SONAR_TOKEN} ]]; then
            echo "::error::Secret \`SONAR_TOKEN\` was not found: it is required to use SonarQube."
            exit 1
          fi
      - name: Setup JFrog credientials
        if: needs.jfrog_authentication.outputs.jfrog_creds == 'true'
        run: |
          echo "PIP_EXTRA_INDEX_URL=https://${{ secrets.PG_USERNAME }}:${{ secrets.JF_API_KEY }}@png.jfrog.io/artifactory/api/pypi/pgg-python/simple" >> $GITHUB_ENV

      # Use PG_DNA_GITHUB_TOKEN by default for all git operations
      - name: Configure PG_DNA_GITHUB_TOKEN as default git token on github.com/pg-ds-dev-class
        env:
          PG_DNA_GITHUB_TOKEN: ${{ secrets.PG_DNA_GITHUB_TOKEN }}
        run: |
          set -e
          git config --global credential.https://github.com/procter-gamble/.helper "! f() { echo username=pgcw; echo password=$PG_DNA_GITHUB_TOKEN; }; f"
          if [[ ! $pg-ds-dev-class == "procter-gamble" ]]; then
            git config --global credential.https://github.com/pg-ds-dev-class/.helper "! f() { echo username=pgcw; echo password=$PG_DNA_GITHUB_TOKEN; }; f"
          fi
          echo "::warning::Using PG_DNA_GITHUB_TOKEN for git operations on github.com/pg-ds-dev-class"

      # Do not remove: fetches your code in the current dir. Full clone (0 depth), not shallow (makes SQ happy)
      - uses: actions/checkout@v4.1.1
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      # Do not remove: it enables Continuous Winning
      - name: Login to the GitHub Container Registry for getting Continuous Winning
        uses: azure/docker-login@v1
        with:
          login-server: ghcr.io
          username: pgcw
          password: ${{ secrets.PG_DNA_GITHUB_TOKEN }}

      # GITHUB_TOKEN is a unique secret automatically created in your workflow.
      # The token's permissions are limited to the repository that contains your workflow.
      # More info about GITHUB_TOKEN here: https://docs.github.com/en/actions/security-guides/automatic-token-authentication
      - name: Cancel All Outdated Workflows
        if: |
          startsWith(github.ref, 'refs/heads/') || startsWith(github.event_name, 'pull_request')
        uses: ./cw
        with:
          check: cancel-uncompleted-workflows
          args: '--token ${{ secrets.GITHUB_TOKEN }} --workflows cw.yml --preserve-run most-recent'

      # Check Markdown
      - name: Lint all Markdown files
        uses: DavidAnson/markdownlint-cli2-action@v16
        with:
          config: '.github/workflows/config/.markdownlint.yml'
          globs: '**/*.md'

      # Enable Python for your testing
      - name: Enable Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # If you have Python enabled in your environment, you may want to check whether your
      # requirement files work - can your package be installed?
      # This will also fail on any dependency conflicts or missing JFrog credentials
      - name: Install Python Dependencies
        run: |
          set -e
          pip install -U pip
          pip install wheel
          pip install -r requirements.txt
          pip install -r requirements-devel.txt
          for f in ./requirements*.txt; do pip install -r $f; done

      # Now install the Python package itself
      - name: Install This Python Package
        run: pip install -e '.[devel]'

      # Check black
      - name: Check black formatting
        id: python-black-formatting
        run: |
          black --config pyproject.toml --check --diff ./src && echo success=true >> $GITHUB_OUTPUT

      # Check isort
      - name: Check isort formatting
        id: python-isort-formatting
        run: |
          isort --settings-file pyproject.toml --check --diff ./src && echo success=true >> $GITHUB_OUTPUT

      # CW check. This lints your source code using Flake8. The `continue-on-error` parameter makes
      # the test green at all times. This is OK since we have a separate red/green state for this
      - name: Lint Python Including Notebooks
        uses: ./cw
        with:
          check: lint-python
          args: "--token ${{ secrets.GITHUB_TOKEN }} --dirs .,src/**,notebooks/**"
        continue-on-error: true

      # CW check. This makes sure notebooks have no output. It has a custom state, this is why
      # `continue_on_error` is `true`.
      - name: Ensure Notebooks Have No Output Cells
        uses: ./cw
        with:
          check: ensure-ipynb-no-output
          args: '--token ${{ secrets.GITHUB_TOKEN }} --dirs notebooks/**'
        continue-on-error: true

      # CW check. This checks that all your modules have `__init__.py` as required
      - name: Check Python Modules Structure
        uses: ./cw
        with:
          check: check-python-modules-structure
          args: '--dirs src/**'

      # Not part of Continuous Winning! This is running your own tests assuming that:
      #  * you have enabled the Python environment above
      #  * you have all the proper dependencies (including `coverage`) installed
      #  * you are using pytest
      #  * you have some actual tests defined
      # Please also remember that the CW environment and your own environment are different
      # Long-running test will be executed only if the PR is labelled with 'include-slow'
      - name: Run all tests with coverage
        id: run-pytest-cov
        run: |
          if [[ ${{ contains(github.event.pull_request.labels.*.name, 'include-slow') }} == true ]]; then
            python test/run_pytest_cov.py --include-slow && echo '::set-output name=success::true'
          else
            python test/run_pytest_cov.py && echo '::set-output name=success::true'
          fi
        continue-on-error: true

      # Prepare cPofile and line_profiler files for upload
      - name: Prepare profiling files
        id: github-sha
        run: |
          if [ "$GITHUB_EVENT_NAME" == "pull_request" ]; then
            GITHUB_SHA=$(cat $GITHUB_EVENT_PATH | jq -r .pull_request.head.sha | cut -c 1-7)
          fi
          if [ "$GITHUB_EVENT_NAME" == "pull_request_target" ]; then
            GITHUB_SHA=$(cat $GITHUB_EVENT_PATH | jq -r .pull_request.head.sha | cut -c 1-7)
          fi
          if [ $(find . -type f -wholename "./profiling/*.profile" | wc -l) -gt 0 ]; then
            for FILE in ./profiling/*.profile; do
              mv "$FILE" "${FILE%.profile}_$GITHUB_SHA.profile"
            done
          else
            echo "cProfile wasn't used in this commit."
          fi
          if [ $(find . -type f -wholename "./profiling/*.txt" | wc -l) -gt 0 ]; then
            for FILE in ./profiling/*.txt; do
              mv "$FILE" "${FILE%.txt}_$GITHUB_SHA.txt"
            done
          else
            echo "line_profiler wasn't used in this commit."
          fi
          echo "GITHUB_SHA=$GITHUB_SHA" >> $GITHUB_OUTPUT

      # Create gprof2dot visualization from cProfile
      - name: Create gprof2dot visualization from cProfile
        run: |
          if [ $(find . -type f -wholename "./profiling/*.profile" | wc -l) -gt 0 ]; then
            sudo apt-get install graphviz
            pip install gprof2dot
            for FILE in ./profiling/*.profile; do
              gprof2dot -f pstats "$FILE" | dot -Tpng -o "${FILE%.profile}.png"
            done
          fi

      # Upload profiling files as artifact
      - name: Upload profiling files
        id: profiling-artifact
        uses: actions/upload-artifact@v4
        with:
          name: profiling-${{ steps.github-sha.outputs.GITHUB_SHA }}-${{ matrix.python-version }}
          path: profiling/
          retention-days: 10
          overwrite: true

      - name: Run SonarScanner And Push Data to SonarQube
        uses: ./cw
        with:
          check: sonar-scanner
          args: '--sonar-token ${{ secrets.SONAR_TOKEN }}'

      # CW check. This posts the coverage report directly as a PR comment. File `coverage.txt`
      # produced by the previous steps must exist! The check is only executed if we are on a PR. If
      # we are not, we have no comment thread, and therefore it does not make sense to post
      - name: Post Coverage Report
        uses: ./cw
        if: |
          startsWith(github.event_name, 'pull_request')
        with:
          check: post-coverage-report
          args: '--token ${{ secrets.GITHUB_TOKEN }}'
        continue-on-error: true

      # Upload build reports
      - uses: actions/upload-artifact@v3
        with:
          name: build-report
          path: |
            htmlcov/
            pytest_report/
            coverage.json

      # Fail if coverage failed
      - name: Fail if tests with coverage failed
        if: steps.run-pytest-cov.outputs.success != 'true'
        run: exit 1

  profiling_info:
    needs: checks
    uses: ./.github/workflows/profiling.yml
    secrets: inherit
    with:
      github_sha: ${{ needs.checks.outputs.github-sha }}
      cw_run_id: ${{ github.run_id }}